#! /usr/bin/python
# by pts@fazekas.hu at Wed May 30 13:55:32 CEST 2018

import struct

def gcd(a, b):
  while b: 
    a, b = b, a % b
  return a


def lcm(a, b):
  return a / gcd(a, b) * b


def parse_dropbear_rsa_private_key(data):
  if not data.startswith('\x00\x00\x00\x07ssh-rsa'):
    raise ValueError('Bad Dropbear ssh-rsa key type.')
  key = {}
  # The public key has only e and n.
  field_names = ('e', 'n', 'd', 'p', 'q')
  i, fi = 11, 0
  while i < len(data):
    size, = struct.unpack('>L', buffer(data, i, 4))
    i += 4
    field = data[i : i + size]
    i += size
    #print (field_names[fi], len(field) * 8)
    key[field_names[fi]] = int(field.encode('hex'), 16)
    fi += 1
  if fi not in (3, 5):
    raise ValueError('Invalid number of fields in Dropbear ssh-rsa private key: %d' % fi)
  x = 41  # Example message, can be any nonnegative integer.
  # This is slow to verify.
  if pow(pow(x, key['e'], key['n']), key['d'], key['n']) != x % key['n']:
    raise ValueError('Invalid RSA private key, expected x ** (d * e) % n == x.')
  # If fi == 3, then we have e, n and d. It's possible to recover p and q
  # from these, see algorithms https://stackoverflow.com/q/2921406/97248
  if fi == 5:
    if key['n'] != key['p'] * key['q']:
      raise ValueError('Invalid RSA private key, expected n == p * q.')
    m = lcm(key['p'] - 1, key['q'] - 1)
    if key['e'] * key['d'] % m != 1:
      raise ValueError('Invalid RSA private key, expected 1 == e * d % m.')
  # Typical bit sizes for a 3072-bit RSA key (ssh-keygen -t rsa -b 3072): ('e', 24), ('n', 3080), ('d', 3072), ('p', 1544), ('q', 1544).
  # Typical value for e: 65537.
  # TODO(pts): Check that p and q are primes.
  # TODO(pts): Check that p and q are not too small.
  return key

# ssh-keygen -t rsa -b 3072 -f t3 -C t3 -P '' 
data = open('t3.dropbear', 'rb').read()
#data = '\x00\x00\x00\x07ssh-rsa\x00\x00\x00\x03\x01\x00\x01\x00\x00\x01\x81\x00\xe3\xeb\x861\xc0V\x94\xdb\xff\x02{E\xf3\xf9\xfe\xb6\xf5\x863:\xfcLW\xf1\x83\xdesi\x1f3\xd7^u\x05q8\x82Q\xe86\xfcR\xaa\xad\x8as\xe4\x1f\x81z\xde\xab\xe4\xe4\xcc\x926\xea\xc8\xce\x9e#S\xcew\xdf\xb7\xcc\xcc$\xa1z\xa8%g\x88H\x1bE\xe19\x1a\xbcX~\xa2\x05\xd2\x98\x1bJ\xe3\xf5\xd9\xfc\x801\xb5\xc7\xe9YK\xccM\x1f\xc5\xb4\x10\xaeGt\xe7uuF(z%\r\x96\xee\x91\xd2\xe5\xe8\x04\xf4\xd9]lE\x9d(6\xfa\x9bM\xd9P#)\xafs\xb11kk\xe2G\xd6Z\xc5\xad\x199\xd4\xbc<\xe7\xeaM;!n\xc1\xc3p\x99\xcd\xec\x89\xc7\xc7\x17b\x17\xa9\xbc\x85\xab\xaf\xf3\xa5\xda\xd8\xce#\xbce\xa6\x9c\xf5\xa2\xa2\xdc\xc2Jm\xb3\x19 \xc9]oXv\xf7\x80\x86{\x97|\xf0\xfa\xb6\xdd\x17\x97x\x12\xf1\x9d\xdb\xd8\x18\x92\x0e\xe2 \x0f\x95\xffRe\xf2\x95\xb6\xd0\xb9\x8c\x18?#A\x85\x1c\xf1\xda\x85\x07brn^\x023\xc6-\xd4\xb7\x03\x81\x81$\xe4:\x00\x05g\x8d/#W\xa5i\x9a\xb0\xc1\xd40\xe1\x16\x99\x9e\xae\xe4\x8d\x12\xd3\xc7\xc6\xbd\xad\x81Y/4\x8co\x1e\xedq\x1b\xfb,\xc3\x1diu\x80t\xee\xcd\x14\xde/\x8d\xdc\xcf\xeb#*\x80\x93\xfd\x7f\xf5\xf4\x8a5\x1fs\xa89\x91\xf2\xf0\x01\xdd\xe8\xdb`\x91\xd7\xfe\x97\xd85\xf7;\'\xdd\xf0\x0ej\xb1\xcf\x117\xfd\x85\x1bU\xcak\x86hW\x82\xe6\xb3\x15\xa4\x7f\x8cz\xdfx9\xb2\x0cP\xb1\xfb\x00\x00\x01\x80Ir9aH\xe8\xdd\xb9s\x18\xda\x9e\xb5;g`\x90\x089\xf4\x15\x1f\x88\xebt"80\xb4\xf4`\xbf\xb8\x98\x13_1g\xb1\x9c\x1e}\x890\xb9@\x15P-\xcai}\x1d\x1a\xb9\xed\x982\xda\x98\xf2\x8e\xd1\xcf\xe4\x03<\xd8\x8b$v\xc0\xee\xf4v\xc3\x8c\xf0\xf4\xf8\xda\r\n\x8a\xbd\xeb\xfaR]\xdf\xd5\xa7V/s\xd5\xdf\xaf\x03\x87\xe7\xd5\xac5b:\xb4\x86\xf7\x92aR\xc1 \x14\x86\xb0\xad\xc6\x0eP<\xbf\xa8\x84\xb7,+\xeb\x96\x1bl\xc4k\xcb F\xda\xf3\x9f\x11,\xcf\xecV\xcf\x96\tj:\xe2/wS|\xb6X\x1e\x8ca\x8d\x97\xb3s\\\x8f]v\xc2\xcc)\xae.3\x13\xd2*Im\r\xe1zs\x84\xed~\xa87j\xcea\x1f\x8f\x1e\xd5,X\x92DC\xcc\xe0\xcf\xdf3\xbe:t8\x1d\xae\xb9\x10\x99\x088\x90\x11\x86oK1}%\r\x9d|\x97j!\xbfW\n>\xd7\x18\x07\'pS\xe9<\xdd\xeb\x99P\xeb\xe0\x8d\x02\x91\xab\xab\x80\xa8U\xbd\x82\x1e=\xd1}c\xfbB\xa8\x94T\x90\xb8\xd2XZ\xbd\xac@$\xed\xaf\xc4\xc5\xd2_29qN\'\xbf\xf3\xd2\x1c\x1c}v)OH^F\x93\x8d\x03\x11\x84\xb0gv\x87\xaf\x8fw8\x0e\x91UH\xb3\x06\x16W[\xd0Y!\x0b\xe7\xce\x86\xd2\x99\xfe\xedM\xe11\x9b,\'\x97\xb9D\xd2\x00\xc4I<\xe1g\xe1*_\x88J\xc5\x1e\'}\x03\xe4\x18\x00+v\x86\x7f\xfc\xe6+v\xa3pU66\xee\x82r\xc9\xf9\xb5\xa2\xa8\x19\x00\x00\x00\xc1\x00\xf61\x08`\xef\xda\xbf\xa9"v\x93\xac}pg\xb4t\xa0\xfbH\xcb\x0c\x8d\xab \x7f6\x02\xac?\x12\x91\xf8\xc8Y\xd5m\xee\xb9\xe6\x91n\xfdB-\xcd\xd6\x95u|\xdf\\\x8d$\x80\xdf\x01,\xbf\x9a\x01\x97\x89\x9d\x18\xf8\x01\xbfH\xa2q\x86\x84Bb\xfd\xca\x81.\xbb\xb2\xc9\xd9X\xc1\xcd\x9b\xe0\x1d\x9f\xbc4b\xb3\x01^\xa5!\x9c\xde\xb3U!U\xba\xde#/&\xfa\xa1]\xd7\x86\x95\xd5\x89k\xe1\xe5x\xb9c\x10\xc0\xca\xa0\xc3\xc7\xa8\xf3\xc9\xb4\x16\x0e\xe9\x9e{H\xe19T\r\x12)@kf\x7f\xb8"\xbdB5(\x0e\xf4\x0eB\xfa\x00\x87\xd9\xf0\xcb\xfb\x00\x9e\xc8=\xa1\xdbs=\x95\xce"\x8f\xb1\xcd_\x8d-@\'\x11b\x9by\xbfT\x9d\x00\x00\x00\xc1\x00\xed\x00"\xc5\x0b\xe5m\xf6\xb3|\xf9\x97\xf2\xf9\x1a\xa8\xad\xe98\x08F\x89h&\x05\x91-\xccR\x1c\xe6t\xe4\x977\xac\xd7\x0f\xbc\xf2?t\xfc\x01\xcb\x84\x92\\\x86O\xcc\x19\xed\x04\xa8b\xac>\x0c\xfe4\xd7e \xd7\xb6\x00\xbd\x86?\x85=\x966\xd4"5Ae\xb1?\x153\xe4JZ\xb3\x84\x08\x12f:\x02A\x9f\xc3\xc5\x004\x14\x10:9\x19\xcf\xf7\xb6%\xfch\xe5"h\xab)\xcd\xf2\x87/\x1bk\xc7{8\x162\xb2\x89\x90\x10q\xf4\x07\x88\x06\xe4\xba\xc3\xb5\x1f \x8b.t\xb7\xe5\xb1\xbc\xe8o\x0b\xd1\xe4\x7f\x16a6F\x1d\xd1d\xb4\n\x9ab{\xb1\xfe#\xfb\x9d"\xd6\xe5\x14[#\xb2g\x8a\xc2\xf5M\xc0\xcbw6*Y\x0e\xc1w'
key = parse_dropbear_rsa_private_key(data)
print key
